Ideas
- Boost
	- Player has a boost meter.
	- Player can use boost to hit other players.
	- Player can hit/collect things to get more boost.
	- When a player collects boost, players in higher positions get less.
- Player can hit/collect a certain amount of things to unlock a shortcut only they can use.
- Status affects
	- Fire: top speed and acceleration are lowered.
	- Shock: steering disabled.
	- Ice: car essentially becomes a block of ice. Steering and engine are disabled, friction is greatly reduced.
- Cube which can withstand a couple hits then explode into fire and shock status effects. The ground is covered with the status effect where the cube exploded and it remains for the rest of the level. (Intead of cubes, do I want to use barrels?)
	- Could have cubes which do not explode and barrels which do.
- Status effect entities
	- Shock
		- Non exploding rigid body cubes - touch it and your car loses steering
		- Exploding rigid body barrels - leave behind a cloud of shockiness
	- Fire
		- Non exploding rigid body cubes - touch it and your car lights on fire
		- Exploding rigid body barrels full of oil - leaves behind an oil slick on fire 
			- This would be hard to do technically, perhaps we could settle for archored barrels which are not rigid body enabled
	- Ice
		- Non exploding rigid body cubes - touch it and your car turns into an ice block
		- Exploding rigid body barrels full of dry ice - leaves behind a cloud of dry ice
- Side/cylinder bumpers which fire off when the player gets close.
- Giant fans which can blow your car sideways or up.
- Hitting a normal rigid body slows down the player.
- Surface types: friction is changed.
	- Concrete/asphalt, mud, ice, oil slicks.
- Boost pad/jet
	- Gives a bigger boost than using boost meter would give.
	- All rigid bodies can be accelerated by this.
- Oil drum that breaks into an oil slick.
- Short cut which opens up once the player has collected a key.
- Moving conveyor belts that can carry things

A note about the car wheel positioning. When the car is in the air such that the suspension is not colliding with the ground, we max out the spring length to the same value as the maximum spring ray length. For the position of the wheel,
we could pick a different maximum length. It's intentionally designed such that the ray length is pretty long to provide better stability so we'll probably want to use a different max length for the visual position of the wheel.

Improvements
- Instead of exporting multiple ground collision meshes, then loading in and inserting each one into the ground grid. Why don't we have the exporter do the work of combining the collision meshes into one big array of indices and positions.

Todo
- [done] Shock cube particle effects
- Shock car particle effects
- Cylinder bumper
- Slow the car down when you hit a rigid body
- Boost jets

I'm questioning if the impulse clamping is correct. When the object has a large overshoot (due to a small delta time) we're seeing iterations which could be spent correcting
the impulse but they don't do anything. Maybe this is correct behavior and I need to put a lower bound on delta time, maybe the clamping logic is incorrect, need to investigate.
	- Need to check this again given the fix we made for the other issue

For a cool particle explosion effect do this:
	RANGE :: 5;

	particle.velocity.x += rand.float32_range(-RANGE, RANGE);
	particle.velocity.y += rand.float32_range(-RANGE, RANGE);
	particle.velocity.z += rand.float32_range(-RANGE, RANGE);
	particle.position += particle.velocity * dt;